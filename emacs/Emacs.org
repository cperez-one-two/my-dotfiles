#+title Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el

* Basic UI Configuration
Disable some of the unwanted GUI elements to start. Enable column numbers globally. Disable for certain major modes.

TODO: Create conditional to disable ~visible-bell~ on MacOS
#+begin_src emacs-lisp
  ;; chrisPmacs
  ;; remove default fluff
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font
Setting the fonts default size. Setting the ~default~, ~variable-pitch~, and ~fixed-pitch~ fonts for use later in config.

#+begin_src emacs-lisp
;; font
(defvar efs/default-font-size 130)
(defvar efs/default-variable-font-size 130)

;; later used to configure UI elements
(set-face-attribute 'default nil :font "Iosevka Nerd Font Mono" :height efs/default-font-size)
(set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font Mono" :height efs/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Iosevka" :height efs/default-variable-font-size :weight 'medium)

#+end_src

* Package Management
Initialize the package repos. Refresh package contents if archive is nil.

#+begin_src emacs-lisp
  ;; Initialize package repos
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** use-package
~use-package~ enables clean configuration by abstracting some of the complexity away from your init.el. Check out the [[https://github.com/jwiegley/use-package][Github]] for reference.

#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* UI Configuration
** Ivy and Counsel
~counsel~ is a drop-in replacement for some searching and file finding default emacs programs. It also contains ~ivy~, which is a minimal completion system.

#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-s" . swiper)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :demand
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t))

#+end_src

* Org Mode
** Org-Babel
*** Load languages
List of languages to load. ~conf-unix~ should pick up config files and highlight syntax of those too.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

*** Structure Templates
Enables the <[shortcut]TAB shortcut

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

*** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src
